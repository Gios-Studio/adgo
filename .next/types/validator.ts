// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}


// Validate ../../app/copilot/page.tsx
{
  const handler = {} as typeof import("../../app/copilot/page.js")
  handler satisfies AppPageConfig<"/copilot">
}



// Validate ../../src/pages/AdUpload.tsx
{
  const handler = {} as typeof import("../../src/pages/AdUpload.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Admin.tsx
{
  const handler = {} as typeof import("../../src/pages/Admin.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Analytics.tsx
{
  const handler = {} as typeof import("../../src/pages/Analytics.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Api/adgo.ts
{
  const handler = {} as typeof import("../../src/pages/Api/adgo.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/CampaignCalendar.tsx
{
  const handler = {} as typeof import("../../src/pages/CampaignCalendar.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Dashboard.tsx
{
  const handler = {} as typeof import("../../src/pages/Dashboard.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/EnvDebug.tsx
{
  const handler = {} as typeof import("../../src/pages/EnvDebug.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Home.tsx
{
  const handler = {} as typeof import("../../src/pages/Home.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Index.tsx
{
  const handler = {} as typeof import("../../src/pages/Index.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Landing.tsx
{
  const handler = {} as typeof import("../../src/pages/Landing.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/MyAds.tsx
{
  const handler = {} as typeof import("../../src/pages/MyAds.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/NotFound.tsx
{
  const handler = {} as typeof import("../../src/pages/NotFound.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Waitlist.tsx
{
  const handler = {} as typeof import("../../src/pages/Waitlist.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/Wallet.tsx
{
  const handler = {} as typeof import("../../src/pages/Wallet.js")
  handler satisfies PagesPageConfig
}




