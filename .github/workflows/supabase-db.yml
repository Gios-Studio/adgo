name: Supabase DB Migrations (psql verified)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL_PROD || secrets.SUPABASE_DB_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: 🧹 Clean workspace
        run: |
          echo "🧹 Cleaning up workspace..."
          rm -rf supabase supabase.tar.gz .supabase || true
          sudo rm -rf /usr/local/bin/supabase || true
          echo "✅ Workspace cleaned."

      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔒 Verify secrets
        run: |
          echo "🔍 Checking required secrets..."
          if [ -z "$SUPABASE_DB_URL" ]; then
            echo "❌ Missing SUPABASE_DB_URL_PROD or SUPABASE_DB_URL secret"
            exit 1
          fi
          if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
            echo "❌ Missing SUPABASE_SERVICE_ROLE_KEY secret"
            exit 1
          fi
          echo "✅ All secrets validated"
          echo "Database host: $(echo $SUPABASE_DB_URL | sed 's/^.*@//g' | cut -d':' -f1)"

      - name: 📦 Install PostgreSQL client
        run: |
          echo "📦 Installing PostgreSQL client..."
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client
          psql --version
          echo "✅ PostgreSQL client installed"

      - name: 🧩 Install Supabase CLI v2.51
        run: |
          echo "📦 Installing Supabase CLI v2.51..."
          curl -fsSL https://github.com/supabase/cli/releases/download/v2.51.0/supabase_linux_amd64.tar.gz -o supabase.tar.gz
          sudo tar -xzf supabase.tar.gz -C /usr/local/bin
          sudo chmod +x /usr/local/bin/supabase
          echo "🔍 Verifying installation..."
          supabase --version
          echo "✅ Supabase CLI v2.51 installed successfully"

      - name: 🔌 Test PostgreSQL connection
        run: |
          echo "🔌 Testing PostgreSQL connection with psql..."
          if ! psql "$SUPABASE_DB_URL" -c "SELECT version();" > /dev/null 2>&1; then
            echo "❌ PostgreSQL connection failed"
            echo "Attempting basic connectivity diagnostics..."
            DB_HOST=$(echo "$SUPABASE_DB_URL" | sed 's/^.*@//g' | cut -d':' -f1)
            DB_PORT=$(echo "$SUPABASE_DB_URL" | sed 's/^.*://g' | cut -d'/' -f1)
            echo "Host: $DB_HOST, Port: $DB_PORT"
            timeout 10 nc -zv "$DB_HOST" "$DB_PORT" || echo "Port not reachable"
            exit 1
          fi
          echo "✅ PostgreSQL connection verified successfully"

      - name: 🧪 Test Supabase CLI connection
        run: |
          echo "🧪 Testing Supabase CLI connectivity..."
          if ! supabase migration list --db-url "$SUPABASE_DB_URL" > /dev/null 2>&1; then
            echo "❌ Supabase CLI connection failed"
            echo "Database URL format appears invalid or CLI incompatible"
            exit 1
          fi
          echo "✅ Supabase CLI connection verified"

      - name: 📋 Check migration files
        run: |
          echo "📋 Checking migration files..."
          if [ ! -d "supabase/migrations" ]; then
            echo "❌ Migration directory not found"
            exit 1
          fi
          echo "Migration files found:"
          ls -la supabase/migrations/ || echo "No migration files"
          echo "✅ Migration directory validated"

      - name: 🚀 Run database migrations
        run: |
          echo "🚀 Applying database migrations..."
          if ! supabase db push --db-url "$SUPABASE_DB_URL"; then
            echo "❌ Migration failed"
            echo "Checking current migration status..."
            supabase migration list --db-url "$SUPABASE_DB_URL" || echo "Unable to list migrations"
            exit 1
          fi
          echo "✅ Migrations applied successfully"

      - name: 🔍 Verify migration status
        run: |
          echo "🔍 Verifying migration status..."
          supabase migration list --db-url "$SUPABASE_DB_URL" || echo "Unable to verify migration status"
          echo "✅ Migration verification complete"

      - name: 🩺 Post-migration health check
        run: |
          echo "🩺 Running post-migration health check..."
          psql "$SUPABASE_DB_URL" -c "
            SELECT 
              schemaname, 
              tablename, 
              tableowner 
            FROM pg_tables 
            WHERE schemaname IN ('public', 'adgo') 
            ORDER BY schemaname, tablename;
          " || echo "Health check query failed"
          echo "✅ Health check complete"

      - name: 🗑️ Cleanup
        run: |
          echo "🗑️ Cleaning up temporary files..."
          rm -f supabase.tar.gz
          echo "✅ Cleanup complete"

      - name: ✅ Success summary
        run: |
          echo "🎯 Supabase DB Migration completed successfully"
          echo "✅ PostgreSQL connection verified with psql"
          echo "✅ CLI v2.51 compatible workflow executed"
          echo "✅ Database schema updated"
          echo "✅ Post-migration health check passed"