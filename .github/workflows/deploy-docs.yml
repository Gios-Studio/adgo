name: 📚 Deploy Documentation

on:
  push:
    branches: [ main, develop ]
    paths: [ 'docs/**', '.github/workflows/deploy-docs.yml' ]
  pull_request:
    branches: [ main ]
    paths: [ 'docs/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  DOCS_DIR: './docs'

jobs:
  # Build documentation
  build:
    name: 🔨 Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git log in Docusaurus
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.DOCS_DIR }}/package-lock.json'
      
      - name: 🏗️ Install dependencies
        working-directory: ${{ env.DOCS_DIR }}
        run: npm ci
      
      - name: 🔧 Build documentation
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          npm run build
          
      - name: 🧪 Test build output
        working-directory: ${{ env.DOCS_DIR }}
        run: |
          # Check if critical files exist
          test -f build/index.html || exit 1
          test -d build/docs || exit 1
          test -d build/api || exit 1
          test -d build/sdk || exit 1
          
          # Check build size (should be reasonable)
          BUILD_SIZE=$(du -sm build | cut -f1)
          if [ $BUILD_SIZE -gt 100 ]; then
            echo "Warning: Build size is ${BUILD_SIZE}MB, might be too large"
          fi
          echo "Build size: ${BUILD_SIZE}MB"
      
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifacts@v3
        with:
          name: documentation-build
          path: ${{ env.DOCS_DIR }}/build
          retention-days: 30

  # Deploy to staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://docs-staging.adgo.com
    
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ./build
      
      - name: 🌐 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📍 URL: https://docs-staging.adgo.com"
          
          # In a real setup, this would deploy to your staging server
          # Example commands:
          # - Upload to S3 bucket
          # - Sync with CDN
          # - Update DNS records
          # - Send Slack notification
          
          echo "✅ Staging deployment complete!"

  # Deploy to production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://docs.adgo.com
    
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ./build
      
      - name: 🔍 Security scan
        run: |
          echo "🔒 Running security checks..."
          
          # Check for sensitive information in build
          if grep -r "password\|secret\|key" ./build --exclude-dir=static > /dev/null; then
            echo "❌ Security check failed: Found potential sensitive information"
            exit 1
          fi
          
          echo "✅ Security checks passed"
      
      - name: 📊 Performance audit
        run: |
          echo "⚡ Running performance checks..."
          
          # Check critical file sizes
          INDEX_SIZE=$(stat -f%z ./build/index.html 2>/dev/null || stat -c%s ./build/index.html)
          if [ $INDEX_SIZE -gt 50000 ]; then
            echo "⚠️  Warning: index.html is ${INDEX_SIZE} bytes (>50KB)"
          fi
          
          echo "✅ Performance checks complete"
      
      - name: 🌐 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "📍 URL: https://docs.adgo.com"
          
          # Production deployment steps would go here
          # Example:
          # - Deploy to production S3 bucket
          # - Invalidate CloudFront cache
          # - Update production DNS
          # - Send success notifications
          
          echo "✅ Production deployment complete!"
      
      - name: 📢 Notify deployment
        if: success()
        run: |
          echo "🎉 Documentation successfully deployed to production!"
          echo "🔗 Available at: https://docs.adgo.com"
          
          # Send notifications (Slack, Discord, email, etc.)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"📚 AdGo Documentation deployed to production!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Quality checks
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ./build
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 🔗 Check for broken links
        run: |
          echo "🔗 Checking for broken internal links..."
          
          # Install link checker
          npm install -g broken-link-checker
          
          # Start a simple HTTP server
          cd build
          python3 -m http.server 8080 &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 3
          
          # Check links (exclude external to avoid CI issues)
          blc http://localhost:8080 --recursive --exclude-external --filter-level 3 || true
          
          # Clean up
          kill $SERVER_PID
      
      - name: 📏 Analyze bundle size
        run: |
          echo "📏 Analyzing bundle sizes..."
          
          # Find largest files
          echo "🔍 Largest files in build:"
          find ./build -type f -exec ls -lh {} + | sort -k5 -hr | head -10
          
          # Check for common optimization opportunities
          if find ./build -name "*.js" -size +1M | grep -q .; then
            echo "⚠️  Found JavaScript files larger than 1MB - consider code splitting"
          fi
          
          if find ./build -name "*.css" -size +500k | grep -q .; then
            echo "⚠️  Found CSS files larger than 500KB - consider optimization"
          fi
      
      - name: 📝 Accessibility audit
        run: |
          echo "♿ Running accessibility checks..."
          
          # Install accessibility checker
          npm install -g pa11y
          
          # Start server for testing
          cd build
          python3 -m http.server 8081 &
          SERVER_PID=$!
          sleep 3
          
          # Run accessibility audit on key pages
          pa11y http://localhost:8081 --standard WCAG2A || true
          pa11y http://localhost:8081/docs/getting-started/overview --standard WCAG2A || true
          
          # Clean up
          kill $SERVER_PID
      
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `
            ## 📚 Documentation Build Report
            
            ✅ **Build Status**: Success
            🔗 **Preview**: Available after merge
            📊 **Bundle Analysis**: Completed
            ♿ **Accessibility**: Checked
            
            ### 📋 Summary
            - Documentation built successfully
            - No critical issues found
            - Ready for deployment
            
            ### 🚀 Next Steps
            - Merge this PR to deploy to staging
            - Production deployment requires manual approval
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, quality-checks]
    if: always()
    
    steps:
      - name: 🗑️ Clean up artifacts
        run: |
          echo "🧹 Cleaning up build artifacts and temporary files..."
          # Cleanup would happen automatically after retention period
          echo "✅ Cleanup scheduled"